// Mocks generated by Mockito 5.1.0 from annotations
// in task_27/test/home_screen_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task1/models/food_model.dart' as _i4;
import 'package:task1/services/food_service.dart' as _i2;
import 'package:task1/viewModels/food_provider.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFoodService_0 extends _i1.Fake implements _i2.FoodService {}

/// A class which mocks [FoodProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodProvider extends _i1.Mock implements _i3.FoodProvider {
  MockFoodProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FoodService get service =>
      (super.noSuchMethod(Invocation.getter(#service), returnValue: _FakeFoodService_0()) as _i2.FoodService);
  @override
  _i3.FoodProviderState get state =>
      (super.noSuchMethod(Invocation.getter(#state), returnValue: _i3.FoodProviderState.none) as _i3.FoodProviderState);
  @override
  List<_i4.Food> get foods =>
      (super.noSuchMethod(Invocation.getter(#foods), returnValue: <_i4.Food>[]) as List<_i4.Food>);
  @override
  bool get hasListeners => (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false) as bool);
  @override
  dynamic changeState(_i3.FoodProviderState? state) => super.noSuchMethod(Invocation.method(#changeState, [state]));
  @override
  void addListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]), returnValueForMissingStub: null);
  @override
  void removeListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]), returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []), returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []), returnValueForMissingStub: null);
}
